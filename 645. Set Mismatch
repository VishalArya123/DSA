class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        // vector<int> result;
        // int n=nums.size();
        // sort(nums.begin(),nums.end());
        // int totalSum=(n*(n+1))/2;
        // int sum=nums[0];
        // for(int i=1;i<n;i++){
        //     if(nums[i]==nums[i-1]){
        //         result.push_back(nums[i]);
        //     }
        //     sum+=nums[i];
        // }
        // result.push_back(totalSum-(sum-result[0]));
        // return result;

        int n=nums.size();
        long long S = (long long)n * (n + 1) / 2;
        long long P = (long long)n * (n + 1) * (2 * n + 1) / 6;

        long long S1 = 0, P1 = 0;
        for (int i = 0; i < n; i++) {
            S1 += nums[i];
            P1 += (long long)nums[i] * nums[i];
        }

        long long diff = S1 - S;           // y - x
        long long squareDiff = P1 - P;     // y^2 - x^2 = (y - x)(y + x)

        long long sum = squareDiff / diff; // y + x

        long long y = (diff + sum) / 2;    // repeating
        long long x = y - diff;            // missing

        return {(int)y, (int)x};
    }
};